rec Toggle
  state Bool
end

idea for Toggle
  fun Toggle.new(state Bool)
    Toggle with
      state
    end
  end

  fun value
    self.state
  end

  fun activate(self var)
    self.state = not self.state
    self
  end
end

rec NthToggle
  super Toggle
  count Int
  max_count Int
end  

idea for NthToggle
  fun NthToggle.new(stat Bool, max_count Int)
    NthToggle with
      super = Toggle.new state
      max_count = max_count
      count = 0
    end
  end

  fun activate(self var)
    self.count += 1

    if self.count >= self.max_count
      super.activate
      self.count = 0
    end

    self
  end
end

fun main
  let start = clock
  let n = 100000

  var val = true
  let toggle = Toggle.new val

  n.times do
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
    val = toggle.activate.value
  end

  puts toggle.value 
  val = true
  var ntoggle = NthToggle.new val, 3

  n.times do
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
    val = ntoggle.activate.value
  end

  puts ntoggle.value

  puts clock - start
end

idea Repeat
  fun times(f Fun)
  fun times(f |Self|)
end

idea Repeat for Nat
  fun times(f Fun)
    var i = 0
    for i <= self where i += 1
      f
    end
  end

  fun times(f |Self|)
    var i = 0
    for i <= self where i += 1
      f i
    end
  end
end