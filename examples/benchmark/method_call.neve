rec Toggle
  state: Bool
end

idea for Toggle
  fun Toggle.new(state: Bool)
    Toggle with
      state
    end
  end

  fun value
    self.state
  end

  fun activate
    Toggle with
      state = not self.state
    end
  end
end

rec NthToggle
  parent: Toggle
  count: Int
  max_count: Int
end  

idea for NthToggle
  fun NthToggle.new(stat: Bool, max_count: Int)
    NthToggle with
      parent = Toggle.new state
      count = 0
      max_count
    end
  end

  fun activate
    let new_count = self.count + 1

    if new_count >= self.max_count
      Toggle with
        parent = parent.activate
        count = 0
        max_count
      end
    else
      self
    end
  end
end

const
  N = 100000
end

fun main
  let start = clock

  let toggle = Toggle.new true
  puts toggle_n_times toggle

  let ntoggle = NthToggle.new(true, 3)
  puts ntoggle_n_times ntoggle

  puts clock - start
end

fun toggle_n_times(toggle: Toggle)
  N.times do
    toggle
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
  end
end

fun ntoggle_n_times(toggle: NthToggle)
  N.times do
    toggle
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
      .activate
  end
end