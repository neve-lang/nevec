rec Tree
  item Int
  depth Int

  left Tree?
  right Tree?
end

idea for Tree
  fun Tree.new(item Int, depth Int)
    Tree with
      item
      depth

      left = match depth
        | 0 : nil
        | else : Tree.new item + item - 1, depth
      end
      right = match depth
        | 0 : nil
        | else : Tree.new item + item, depth
      end
    end
  end

  fun check
    match self.left
      | nil : self.item
      | else : self.item + self.left.check - self.right.check
    end
  end
end

const
  MinDepth = 4
  MaxDepth = 14
  StretchDepth = MaxDepth + 1
end

fun main
  let start = clock

  puts "stretch tree of depth: #{stretch_depth}"
  puts "check: #{Tree.new 0, stretch_depth |> check}"

  let long_lived_tree = Tree.new 0, max_depth
  let iterations = 2 ^ MaxDepth

  let depth = MinDepth

  while depth < StretchDepth
    var check = 0
    var i = 1

    iterations.times do
      check = check + Tree.new i, depth |> check + Tree.new -i, depth |> check
    end

    puts "num trees: #{iterations * 2}"
    puts "depth: #{depth}"
    puts "check: #{check}"

    iterations = iterations / 4
    depth = depth + 2
  end

  puts "long lived tree of depth: #{max_depth}"
  puts "check: #{long_lived_tree.check}"
  puts "elapsed: #{clock - start}"
end