union Tree
  rec Leaf
    item: Int
    depth: Int
  end

  rec Branch
    item: Int
    depth: Int
    left: Tree
    right: Tree
  end
end

idea for Tree
  fun Self.new(item: Int, depth: Int)
    match depth
      | 0 -> Leaf with
        item
        depth
      end
      | _ -> Branch with
        item
        depth
        left = Self.new(item + item - 1, depth)
        right = Self.new(item + item, depth)
      end
    end
  end

  fun check
    match self
      | Leaf(item, ..) -> item
      | Branch(item, _, left, right) -> self.item + self.left.check - self.right.check
    end
  end
end

const
  MinDepth = 4
  MaxDepth = 14
  StretchDepth = MaxDepth + 1
end

fun main
  let start = clock

  puts "Stretch tree of depth: #{StretchDepth}"
  puts "Check: #{Tree.new(0, StretchDepth).check}"

  let long_lived_tree = Tree.new(0, max_depth)
  let iterations = 2 ^ MaxDepth

  stress iterations

  puts "Long lived tree of depth: #{max_depth}"
  puts "Check: #{long_lived_tree.check}"
  puts "Elapsed: #{clock - start}"
end

fun stress(
  depth: Int = MinDepth,
  iterations: Int
)
  if depth >= StretchDepth
    return
  end

  let check = rec_check iterations

  puts "Num trees: #{iterations * 2}"
  puts "Depth: #{depth}"
  puts "Check: #{check}"

  stress(depth + 2, iterations / 4)
end

fun rec_check(iterations: Int)
  match iterations
    | 0 -> 0
    | _ -> Tree.new(i, depth).check + Tree.new(-i, depth).check + rec_check(iterations - 1)
  end
end